#!/bin/sh

# getArg0
if [ -z "${BASH_SOURCE[0]}" ]; then
#as zsh
A0=$0
else
#as bash
A0=${BASH_SOURCE[0]}
fi
export ROOT_DIR=`dirname $A0`
export THIS_SH=`basename $A0`
export COMMON_SH_DIR=$ROOT_DIR/.common_lib

export BUILD_ARCH
export BUILD_HOST
export BUILD_HOST_PATH
export BUILD_HOST_FULL_PATH
source $ROOT_DIR/custom.env
if [ -z $BUILD_ARCH ];then
export BUILD_ARCH=arm64
fi
if [ -z $BUILD_HOST ];then
export BUILD_HOST=arm-linux-gnueabi
fi

export CURRENT_TIME=$(date "+%Y%m%d%H%M%S")

## configure 参数生成的路径（用于调试）
export tmp_config=my_config

# 是否自动创建有关的目录(默认创建)
export SKIP_MK_DIR

## 路径管理
export BASE=`pwd`
export CODE_PATH=${BASE}/source/
export OUTPUT_PATH=${BASE}/install/
export OUTPUT_PATH_HOST=${BASE}/install.host/
export ARCHIVE_PATH=${BASE}/compressed

## 工具链
export BUILD_HOST_=""
if [ -z "${BUILD_HOST}"  ]; then
   export BUILD_HOST_=""
else
   export BUILD_HOST_=${BUILD_HOST}-
fi
export _CC="${BUILD_HOST_}gcc"
export _CPP="${BUILD_HOST_}g++"
export _CXX="${BUILD_HOST_}g++"
export _LD="${BUILD_HOST_}ld"
export _AR="${BUILD_HOST_}ar"
export _RANLIB="${BUILD_HOST_}ranlib"
export _STRIP="${BUILD_HOST_}strip"


function set_compile_env_for_target () {
    export CC=${_CC}
    export CXX=${_CXX}
    export AR=${_AR}
    export LD=${_LD}
    export RANLIB=${_RANLIB}
    export STRIP=${_STRIP}
}


## 添加环境变量
if [ -d "${BUILD_HOST_PATH}"  ]; then
    export PATH=${PATH}:${BUILD_HOST_PATH}
fi

# 获取 工具链所在位置 下面的操作为的是在 CMakeLists.txt 中插入下面内容
##export GCC_FULL_PATH=`whereis ${_CC} | awk -F: '{ print $2 }' | awk '{print $1}'` # 防止多个结果
##export GCC_DIR=`dirname ${GCC_FULL_PATH}/`

function make_dirs () {
    #为了方便管理，创建有关的目录
    mkdir -pv $CODE_PATH
    mkdir -pv $OUTPUT_PATH
    mkdir -pv $ARCHIVE_PATH
}

export MARK_FILE_FOR_DOWNLOAD=${ARCHIVE_PATH}/.mark
function clean_download_mark() {
    rm $MARK_FILE_FOR_DOWNLOAD -rf
}
function add_download_mark() {
    echo $1 >> $MARK_FILE_FOR_DOWNLOAD
}

function tget () { #try wget
    local filename=`basename $1`
    cd ${ARCHIVE_PATH}
    echo "Downloading [${filename}]..."
    if [ ! -f ${filename} ];then
        wget "$@" || { echo "Failed"; rm $filename;exit 0; };
    fi

    add_download_mark ${filename}
    echo "[OK] Downloaded [${filename}] "
}

# 适用于 例如github等情况 https://github.com/<author>/<repo>/archive/refs/tags/va.b.c.tar.gz
# $1 : url
# $2 : local file name
function tget_and_rename () { #try wget
    local filename=`basename $1`
    local output="$2"
    if [ ! -z "$output" ]; then
        filename="$output"
    fi
    cd ${ARCHIVE_PATH}
    echo "Downloading [${filename}]..."
    if [ ! -f ${filename} ];then
        wget $1 -O $filename || { echo "Failed"; rm $filename;exit 0; };
    fi

    add_download_mark ${filename}
    echo "[OK] Downloaded [${filename}] "
}

function tgit () { #try git and tar
    local filename=`basename $1 | sed 's/.git//g'`

    cd ${ARCHIVE_PATH}
    echo "Clone [${filename}]..."
    if [ ! -f ${filename}.tgz ];then
        git clone $1
        rm ${filename}/.git* -rf
        echo "Making a tar file."
        tar -zcf ${filename}.tgz ${filename}
        rm ${filename} -rf
    fi

    add_download_mark ${filename}
    echo "[OK] Cloned [${filename}] "
}

function tar_package () {
    cd ${ARCHIVE_PATH}
    #for FILE_CPS in `find . -maxdepth 1 -mindepth 1 | grep -E 'tar.gz|tgz|tar.xz|txz|tar.bz2|zip'`
    for FILE_CPS in `cat $MARK_FILE_FOR_DOWNLOAD`
    do
        if [ -d  $FILE_CPS ]; then
            continue
        fi
        tarfile=`basename $FILE_CPS`
        filename=`echo ${tarfile}| sed 's/.tar.gz//'| sed 's/.tgz//' | sed 's/.tar.xz//' | sed 's/.txz//' | sed 's/.tar.bz2//'| sed 's/.zip// '`
        if [ ! -d "${CODE_PATH}/${filename}" ]; then
            echo "Uncompressing $tarfile..."
            file_type=`echo ${FILE_CPS##*.}`
            if [ "$file_type" = "zip" ] ; then
                unzip $FILE_CPS -d  ${CODE_PATH}
            else
                tar -xf $FILE_CPS -C  ${CODE_PATH}
            fi
        else
            echo "Skip $tarfile..."
        fi
    done
    clean_download_mark
}

# 将含有关键字的行整行替换为新的内容
function file_replace_match_lines(){
    local fin=$1
    local old=$2
    local new=$3
    if [ -z "$fin" ]; then
        echo "$0 file old new"
        return 1
    fi
    # 找出匹配的行
    ## cut : -d 用来设置间隔符为冒号， -f 提取所需要的域
    local find_line=`cat $fin | grep -n "$old" |  cut -f1 -d:`
    if [ $? != 0 ];then
        return $?
    fi
    # 考虑到替换的文本可能需要转义，尝试使用不需要转义的符号
    for token in `echo '#' '/'  '!' '@' '|'`
    do
        ret=`echo "$old $new" | grep "$token"`
        if [ ! -z "$ret" ];then
            continue
        fi
        #echo "safe $token"
        # 依次替换匹配的所有行
        for line in `echo $find_line`
        do
            #sed "${line}s/.*/$new/g" $fin
        bash <<EOF
        sed -i '${line}s$token.*$token$new${token}g' $fin
EOF
        done

        # 替换成功则退出
        if [ $? = 0 ];then
            return
        fi
    done
    #(找不到安全的分隔符)

    # 基于'/'的转义下做的替换
    local oldt=`echo $old| sed 's:\/:\\\/:g'`
    local newt=`echo $new| sed 's:\/:\\\/:g'`

    for line in `echo $find_line`
    do
        bash <<EOF
        sed -i "${line}s/.*/$newt/g" $fin
EOF
    done
}

function mk_softlink_to_dest()
{
    local src="$1"
    local dst="$2"

    if [ ! -f $src ]; then
        echo "Need a file."
        return 1
    fi

    local full_path_src=`readlink -f $src`
    local full_path_dst=`readlink -f $dst`
    if [ "$full_path_dst" =  "$full_path_src" ]; then
        echo "Skip, same path."
    else
        unlink $dst > /dev/null 2>&1
        ln -s $full_path_src $dst  2>&1
    fi
}

get_target_gcc_path ()
{
    local ret=""

    ret=`which ${_CC} | grep -v 'not found'`
    if [ ! -z $ret ];then
        export BUILD_HOST_FULL_PATH="$ret"
        export BUILD_HOST_PATH=`dirname $BUILD_HOST_FULL_PATH`
        return 0
    fi

    ret=`whereis ${_CC} | awk  '{print$2}' `
    if [ ! -z $ret ];then
        export BUILD_HOST_FULL_PATH="$ret"
        export BUILD_HOST_PATH=`dirname $BUILD_HOST_FULL_PATH`
        return 0
    fi
}


function require () {
    echo "Checking [$1]"
    command -v $1 >/dev/null 2>&1 || { echo >&2 "Aborted : Require \"$1\" but not found."; exit 1; }
}

if [ -z $SKIP_MK_DIR ];then
    make_dirs
fi
require ${_CC}     || return 1
require ${_CPP}    || return 1
require ${_AR}     || return 1
require ${_LD}     || return 1
require ${_RANLIB} || return 1
require ${_STRIP}  || return 1

get_target_gcc_path

# 如果需要看到 过程，则 在使用时随便提供一个参数
#export SHVERBOSE=$1
#export SHVERBOSE=1

# 初始各组件的编译脚本
load_shells () {
    for sh_file in `cd $COMMON_SH_DIR; find . -type f -name "*.sh" | grep -v "$THIS_SH" | grep -v ".todo/" | grep -v ".ref/" | sed 's/..//'`
    do
        source $COMMON_SH_DIR/$sh_file

        if [ ! -z "$SHVERBOSE" ]; then
            echo "Source $sh_file"
        fi

    done
}
load_shells
